package org.jcodec.codecs.h264;

import static org.jcodec.codecs.h264.io.model.SubMBType.L0_4x4;
import static org.jcodec.codecs.h264.io.model.SubMBType.L0_4x8;
import static org.jcodec.codecs.h264.io.model.SubMBType.L0_8x8;

import org.jcodec.codecs.h264.decode.InterPredictionBuilder;
import org.jcodec.codecs.h264.decode.Interpolator;
import org.jcodec.codecs.h264.io.model.SubMBType;
import org.jcodec.codecs.h264.io.model.Vector;
import org.jcodec.common.model.ColorSpace;
import org.jcodec.common.model.Picture;
import org.jcodec.common.model.Point;
import org.junit.Test;

public class TestInterPredictionBuilder extends JAVCTestCase {
	
	private int[] ref1 = new int[] {
		139, 115, 108, 182, 222, 225, 230, 232, 232, 232, 232, 232, 233, 234, 234, 235, 236, 236, 236, 235, 233, 232, 231, 231, 230, 230, 230, 230, 206, 199, 199, 206, 
		115, 160, 192, 221, 222, 225, 230, 232, 232, 232, 233, 234, 234, 235, 236, 236, 236, 236, 236, 236, 236, 236, 235, 234, 233, 232, 231, 231, 220, 210, 202, 204, 
		196, 212, 220, 219, 223, 225, 230, 232, 232, 232, 233, 234, 234, 235, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 235, 235, 235, 235, 220, 210, 202, 204, 
		212, 214, 217, 218, 224, 225, 230, 232, 232, 232, 232, 232, 208, 208, 208, 204, 196, 192, 191, 190, 188, 187, 187, 189, 190, 192, 193, 193, 206, 199, 199, 206, 
		216, 215, 217, 218, 225, 237, 231, 217, 204, 189, 173, 159, 153, 140, 127, 124, 103, 106, 111, 111, 108, 102, 105, 114, 133, 136, 149, 161, 172, 174, 179, 182, 
		216, 215, 216, 217, 224, 224, 203, 187, 178, 159, 134, 123, 103, 100,  97,  95,  88,  86,  87,  87,  84,  78,  81,  90,  93, 112, 126, 141, 158, 178, 190, 183, 
		216, 215, 216, 216, 212, 193, 164, 155, 139, 128, 111, 103, 100, 100,  99, 101, 104, 105, 102,  99,  96,  90,  93, 102,  79,  87, 100, 129, 131, 158, 186, 186, 
		216, 216, 216, 216, 172, 151, 130, 126, 114, 113, 113, 115, 119, 121, 123, 123, 123, 122, 117, 112, 109, 103, 106, 115, 101,  84,  86, 106, 118, 135, 170, 188, 
		217, 214, 211, 165, 122, 121, 123, 109, 110, 113, 118, 118, 113, 107, 102, 106, 111, 114, 114, 114, 115, 108, 106, 103, 112, 106, 101, 100, 110, 136, 165, 177, 
		207, 212, 185, 126, 122, 121, 120, 114, 112, 110, 105, 100,  88,  91,  95, 101, 109, 114, 113, 113, 112, 107,  94,  85,  84,  90, 101, 107, 115, 137, 169, 190, 
		210, 205, 158, 116, 128, 115, 114, 115, 113, 112, 105, 100,  97, 100, 104, 107, 112, 115, 114, 114, 112, 106,  91,  87,  76,  86,  94, 100, 127, 160, 187, 198, 
		205, 187, 143, 130, 119, 104, 102, 115, 114, 116, 118, 120, 120, 120, 120, 119, 116, 116, 115, 115, 112, 106, 104, 102, 101, 103, 103, 101, 147, 186, 203, 198, 
		167, 187, 150, 127, 105,  84, 107, 119, 116, 122, 123, 113, 107, 100, 101, 110, 119, 117, 115, 115, 113, 112, 106, 101, 105, 111, 115, 133, 184, 202, 206, 203, 
		141, 160, 168, 133, 100,  85, 112, 125, 122, 120, 112, 108,  95,  86,  85,  92, 106, 114, 115, 113, 117, 104,  89,  87,  91,  98, 107, 127, 200, 202, 204, 205, 
		110, 104, 144, 162,  98,  84, 115, 132, 125, 111, 100, 100,  99,  87,  78,  82,  96, 110, 118, 118, 103,  77,  68,  84,  87,  86,  94, 127, 200, 200, 203, 206, 
		 98, 107, 105, 123,  97,  83, 115, 135, 126, 110,  99, 100,  92,  78,  67,  69,  92, 105, 119, 127, 109,  70,  51,  70,  87,  82,  91, 128, 198, 202, 203, 206, 
		109, 108, 109, 109,  81,  80, 116, 131, 124, 111,  93,  80,  73,  65,  65,  73,  98, 109, 122, 132, 116,  83,  55,  55,  53,  74,  89, 141, 193, 205, 203, 201, 
		109, 109, 109, 109,  97,  77, 116, 141, 126, 120, 108,  93,  96,  88,  88,  96, 108, 118, 130, 136, 128, 107,  85,  68,  88, 102, 106, 134, 182, 207, 204, 210, 
		109, 107, 108, 108, 113,  91, 121, 143, 136, 128, 120, 111, 109, 101, 101, 109, 120, 126, 135, 137, 140, 121, 107,  96,  93, 103, 116, 127, 134, 186, 213, 203, 
		109, 107, 108, 109, 115, 105, 131, 141, 142, 136, 129, 120, 128, 120, 120, 128, 133, 135, 139, 141, 148, 127, 115, 115, 116, 119, 130, 133, 114, 128, 183, 207, 
		 99, 103, 106, 107, 115, 109, 135, 141, 144, 143, 136, 131, 126, 125, 124, 124, 124, 123, 143, 169, 178, 143, 119, 121, 123, 126, 137, 136, 105, 102, 127, 172, 
		 91,  95, 101, 104, 116, 109, 135, 142, 145, 145, 139, 139, 137, 134, 131, 131, 134, 134, 154, 177, 188, 153, 121, 117, 121, 126, 137, 137,  91,  87, 108, 126, 
		 75,  81,  95, 101, 115, 111, 134, 142, 145, 144, 143, 141, 138, 131, 127, 129, 133, 136, 154, 169, 180, 153, 121, 108, 121, 126, 137, 138, 103,  91,  93, 105, 
		 67,  75,  91,  99, 116, 113, 134, 143, 147, 145, 142, 140, 135, 129, 122, 116, 114, 126, 141, 150, 162, 143, 119, 106, 120, 126, 137, 138, 112,  93,  87,  96, 
		 47,  47,  65,  82, 112, 120, 134, 142, 144, 143, 139, 137, 133, 128, 122, 120,  96,  89,  99, 121, 128, 110, 105, 113, 117, 122, 131, 138, 104,  93,  92,  96, 
		 72,  60,  51,  55, 105, 123, 132, 137, 139, 139, 137, 137, 134, 131, 125, 123, 110, 102, 102, 114, 110, 103, 113, 124, 117, 115, 122, 131,  97,  92,  94,  96, 
		100,  81,  60,  57,  91, 127, 131, 134, 137, 137, 137, 137, 135, 131, 129, 127, 123, 120, 110, 104, 105, 113, 126, 135, 127, 117, 115, 122,  91,  93,  95,  96, 
		104,  90,  82,  87,  75, 120, 132, 133, 136, 136, 136, 137, 137, 135, 133, 130, 126, 124, 111,  96, 113, 124, 135, 140, 137, 127, 117, 115,  92,  94,  97,  97, 
		113, 110, 100,  94,  92,  91,  90, 114, 136, 137, 138, 139, 140, 137, 131, 124, 131, 125, 115, 108, 118, 117, 127, 123, 126, 138, 140, 108,  91,  95,  96,  96, 
		118, 113, 103,  98,  95,  81,  67, 106, 137, 138, 139, 139, 133, 121, 104,  97,  98,  97,  95,  92,  91,  78,  82,  85, 116, 132, 142, 114,  90,  93,  95,  95, 
		123, 118, 108, 103,  93,  77,  66, 100, 139, 139, 141, 141, 135, 107,  78,  75,  92,  96, 104, 106,  86,  83,  93,  90, 112, 128, 138, 110,  86,  89,  91,  91, 
		125, 120, 110, 105,  92,  77,  74, 106, 139, 140, 141, 140, 137, 119, 119, 136, 144, 136, 120, 111, 108, 128, 148, 133, 118, 130, 132, 100,  84,  87,  89,  89 
	};
	
	private int[] ref2 = new int[] {
		140, 112, 118, 178, 224, 227, 232, 233, 232, 232, 232, 231, 232, 233, 233, 234, 235, 235, 235, 236, 235, 235, 234, 234, 233, 233, 232, 232, 209, 202, 202, 209, 
		123, 153, 191, 225, 224, 227, 232, 233, 232, 232, 232, 233, 233, 234, 235, 235, 235, 235, 234, 234, 234, 233, 233, 233, 233, 233, 233, 233, 225, 213, 204, 207, 
		190, 221, 221, 223, 223, 227, 232, 233, 232, 232, 232, 233, 233, 234, 235, 235, 235, 235, 234, 234, 234, 233, 234, 235, 235, 236, 237, 237, 225, 213, 204, 207, 
		213, 219, 212, 222, 225, 227, 232, 233, 232, 232, 231, 231, 207, 207, 207, 203, 194, 189, 188, 188, 188, 187, 188, 189, 191, 191, 193, 193, 206, 199, 199, 206, 
		219, 218, 219, 222, 226, 236, 233, 222, 200, 192, 176, 168, 144, 136, 119, 111, 108, 108, 108, 109, 108, 107, 109, 118, 131, 142, 159, 166, 173, 174, 174, 175, 
		219, 219, 221, 220, 223, 222, 203, 189, 174, 162, 139, 127,  99,  96,  94,  93,  91,  91,  88,  88,  84,  79,  82,  91, 102, 107, 122, 132, 158, 177, 186, 177, 
		219, 217, 219, 219, 214, 193, 162, 151, 132, 124, 107,  99, 103, 105, 107, 107, 107, 107, 104, 102,  98,  91,  93, 103,  85,  84, 105, 127, 130, 157, 184, 183, 
		219, 216, 219, 219, 177, 153, 126, 121, 119, 116, 114, 114, 122, 121, 120, 119, 117, 117, 114, 114, 110, 106, 108, 117, 102,  86,  87, 103, 115, 133, 168, 186, 
		217, 212, 214, 170, 117, 127, 127, 117, 110, 113, 118, 118, 116, 111, 106, 107, 111, 113, 112, 112, 110, 107, 102, 100, 113, 103,  93,  93, 119, 129, 168, 168, 
		203, 205, 185, 127, 127, 127, 117, 107, 112, 110, 105, 100,  85,  85,  90,  93, 114, 114, 114, 114, 112, 105,  91,  85,  79,  93, 104, 100, 116, 125, 167, 185, 
		212, 205, 163, 118, 127, 117, 107, 109, 112, 112, 105, 101,  99, 100, 105, 108, 113, 114, 113, 115, 112, 106,  93,  86,  74,  74,  90, 107, 128, 155, 185, 203, 
		210, 189, 144, 127, 117, 107, 109, 117, 114, 116, 118, 120, 119, 116, 111, 111, 112, 115, 113, 113, 112, 107, 103, 101, 102, 107, 108, 105, 141, 186, 202, 202, 
		167, 187, 156, 130, 103,  87, 110, 128, 119, 125, 118, 103, 109, 102, 103, 112, 111, 115, 113, 106, 113, 107, 102, 105, 101, 109, 114, 132, 193, 202, 207, 201, 
		145, 165, 174, 138, 103,  87, 112, 128, 121, 123, 113, 103,  97,  88,  87,  94, 105, 114, 117, 112, 119, 101,  85,  86,  89,  98, 111, 139, 194, 202, 208, 203, 
		108, 104, 145, 165, 103,  86, 113, 128, 122, 113, 103, 103,  99,  87,  78,  82,  95, 109, 124, 125, 101,  78,  67,  80,  86,  86,  99, 136, 195, 204, 209, 204, 
		100, 106, 107, 127, 103,  86, 113, 128, 122, 113,  98, 103,  87,  73,  62,  64,  89, 107, 126, 129, 106,  72,  50,  62,  93,  84,  88, 125, 195, 204, 208, 204, 
		111, 109, 111, 111,  86,  84, 114, 129, 123, 114,  92,  82,  74,  67,  67,  74, 103, 110, 126, 132, 118,  81,  62,  57,  62,  79,  92, 141, 195, 198, 208, 201, 
		111, 110, 111, 111, 100,  83, 115, 138, 124, 116, 100,  92,  92,  85,  85,  92, 110, 116, 128, 134, 131, 100,  84,  76,  81,  95, 108, 145, 193, 208, 206, 211, 
		111, 110, 110, 111, 115,  95, 120, 139, 132, 127, 116, 111, 106,  99,  99, 106, 125, 128, 134, 136, 144, 125, 114, 100,  95, 104, 117, 130, 139, 183, 204, 202, 
		111, 111, 111, 112, 115, 108, 129, 139, 138, 135, 124, 121, 124, 117, 117, 124, 133, 134, 137, 139, 143, 130, 122, 105, 114, 119, 133, 135, 111, 125, 184, 207, 
		104, 106, 109, 111, 114, 113, 127, 138, 141, 140, 141, 140, 138, 133, 128, 127, 124, 124, 146, 164, 173, 144, 117, 119, 121, 126, 135, 138, 109, 102, 132, 171, 
		 94,  97, 104, 109, 114, 113, 127, 140, 141, 141, 141, 140, 138, 133, 128, 129, 132, 135, 158, 176, 185, 155, 119, 113, 121, 126, 135, 138,  97,  85,  98, 123, 
		 75,  81,  93,  99, 114, 113, 129, 141, 141, 141, 139, 138, 136, 131, 126, 127, 129, 131, 153, 172, 176, 155, 119, 104, 120, 124, 133, 137, 105,  94,  92,  97, 
		 66,  73,  88,  95, 114, 113, 130, 141, 141, 141, 138, 136, 134, 130, 125, 122, 116, 115, 137, 155, 155, 144, 117, 101, 120, 124, 132, 136, 100,  95,  93,  96, 
		 50,  51,  67,  82, 111, 122, 131, 137, 140, 140, 137, 134, 132, 128, 123, 121,  97,  87,  98, 120, 113, 103, 102, 111, 119, 122, 129, 132,  98,  96,  95,  95, 
		 74,  63,  55,  58, 104, 134, 130, 143, 139, 139, 136, 133, 131, 127, 123, 120, 114, 101,  97, 107, 103, 104, 115, 125, 120, 122, 126, 126,  97,  95,  94,  95, 
		 99,  82,  63,  60,  84, 127, 130, 137, 139, 139, 136, 134, 132, 132, 127, 125, 130, 120, 105, 100, 102, 115, 131, 132, 129, 126, 122, 120,  96,  95,  95,  95, 
		102,  90,  83,  86,  72, 107, 131, 120, 139, 138, 136, 135, 134, 134, 129, 128, 127, 125, 114, 106, 111, 125, 135, 131, 129, 126, 120, 118,  96,  96,  96,  96, 
		110, 108,  99,  94,  99,  80,  76, 113, 140, 139, 137, 137, 145, 135, 130, 129, 126, 124, 113, 108, 113, 122, 125, 120, 124, 136, 141, 111,  95,  95,  95,  95, 
		115, 110, 101,  97,  99,  80,  76, 113, 139, 139, 138, 137, 135, 120, 103, 101,  96,  94,  92,  92,  93,  85,  82,  88, 113, 129, 143, 117,  94,  94,  94,  94, 
		119, 115, 106, 101,  99,  80,  76, 113, 139, 139, 139, 139, 129, 108,  79,  72,  87,  92, 103, 108,  83,  78,  80,  89, 108, 125, 138, 113,  90,  90,  90,  90, 
		121, 117, 108, 103,  99,  80,  76, 113, 139, 139, 139, 139, 125, 118, 116, 122, 144, 136, 120, 111, 115, 130, 144, 145, 115, 127, 132, 102,  87,  87,  87,  87 
	};
	
	@Test
	public void testMB16x16() {
		
		int[] expected = new int[] {
			135, 125, 119, 161, 213, 228, 229, 233, 232, 232, 232, 232, 232, 233, 233, 233, 
			134, 152, 190, 219, 227, 224, 230, 233, 232, 232, 232, 232, 233, 234, 236, 236, 
			197, 213, 225, 219, 223, 224, 229, 233, 233, 234, 234, 237, 233, 229, 233, 233, 
			215, 217, 214, 217, 225, 227, 233, 234, 228, 224, 221, 221, 205, 189, 189, 183, 
			219, 218, 219, 221, 222, 231, 233, 223, 204, 189, 175, 162, 143, 124, 115, 103, 
			219, 219, 220, 219, 221, 222, 205, 185, 171, 158, 141, 124, 107,  94,  97,  97, 
			219, 218, 217, 221, 217, 198, 165, 145, 135, 124, 114, 102, 104, 111, 111, 112, 
			220, 217, 217, 221, 184, 148, 135, 121, 118, 116, 117, 117, 121, 124, 119, 118, 
			213, 210, 213, 188, 129, 118, 130, 121, 111, 111, 114, 116, 111, 105, 102, 100, 
			203, 207, 200, 146, 120, 131, 120, 108, 109, 113, 107, 102,  91,  84,  90,  93, 
			215, 212, 182, 133, 121, 123, 109, 108, 112, 113, 111, 107, 107, 106, 107, 109, 
			200, 199, 167, 133, 122, 105, 103, 117, 119, 116, 120, 118, 118, 117, 111, 111, 
			158, 175, 180, 146, 116,  89,  95, 125, 125, 122, 125, 108, 103, 102,  96, 104, 
			135, 139, 162, 166, 125,  88,  97, 125, 126, 121, 117, 106, 101,  93,  85,  87, 
			105,  99, 112, 156, 137,  85,  97, 125, 127, 118, 106, 103, 103,  92,  78,  73, 
			102, 106, 105, 115, 113,  86,  97, 125, 127, 119, 103,  96,  92,  75,  65,  60
		};
		
		Vector[] mVectors = new Vector[] { new Vector(-2, 1, 0) };
		Interpolator interpolator = new Interpolator();
		int[] interpolated = interpolator.interpolateLuma(ref2, 32, 32);

		InterPredictionBuilder builder = new InterPredictionBuilder();
		Picture[] reference = new Picture[] { new Picture(256,
				256, new int[][] {interpolated}, ColorSpace.YUV420) };
		int[] actual = builder.predict16x16(reference, mVectors, new Point(0, 0));
		assertArrayEquals(expected, actual);
	}
	
	@Test
	public void testMB16x8() {
		
		int[] expected = new int[] {
			134, 126, 128, 173, 216, 228, 230, 233, 232, 232, 232, 232, 232, 233, 233, 234, 
			136, 163, 194, 221, 225, 226, 231, 233, 232, 232, 231, 233, 234, 234, 236, 236, 
			198, 217, 221, 221, 224, 225, 231, 233, 234, 234, 235, 236, 230, 231, 233, 233, 
			215, 217, 214, 219, 226, 229, 233, 232, 225, 224, 219, 219, 199, 189, 186, 181, 
			219, 219, 220, 221, 224, 232, 229, 219, 199, 186, 170, 159, 136, 123, 112, 102, 
			219, 219, 220, 219, 221, 218, 199, 183, 167, 155, 135, 121, 104,  95,  97,  97, 
			219, 218, 218, 222, 210, 190, 158, 144, 132, 122, 112, 102, 107, 111, 112, 112, 
			220, 216, 218, 212, 171, 150, 131, 120, 118, 117, 118, 117, 122, 122, 119, 118,
			213, 210, 213, 188, 129, 118, 130, 121, 111, 111, 114, 116, 111, 105, 102, 100, 
			203, 207, 200, 146, 120, 131, 120, 108, 109, 113, 107, 102,  91,  84,  90,  93, 
			215, 212, 182, 133, 121, 123, 109, 108, 112, 113, 111, 107, 107, 106, 107, 109, 
			200, 199, 167, 133, 122, 105, 103, 117, 119, 116, 120, 118, 118, 117, 111, 111, 
			158, 175, 180, 146, 116,  89,  95, 125, 125, 122, 125, 108, 103, 102,  96, 104, 
			135, 139, 162, 166, 125,  88,  97, 125, 126, 121, 117, 106, 101,  93,  85,  87, 
			105,  99, 112, 156, 137,  85,  97, 125, 127, 118, 106, 103, 103,  92,  78,  73, 
			102, 106, 105, 115, 113,  86,  97, 125, 127, 119, 103,  96,  92,  75,  65,  60
		};
		
		Vector[] mVectors = new Vector[] { new Vector(-1, 1, 0), new Vector(-2, 1, 0) };
		Interpolator interpolator = new Interpolator();
		int[] interpolated = interpolator.interpolateLuma(ref2, 32, 32);

		InterPredictionBuilder builder = new InterPredictionBuilder();
		Picture[] reference = new Picture[] { new Picture(256,
				256, new int[][] {interpolated}, ColorSpace.YUV420) };
		int[] actual = builder.predict16x8(reference, mVectors, new Point(0, 0));
		assertArrayEquals(expected, actual);
	}

	@Test
	public void testMB8x16() {
		
		int[] expected = new int[] {
			129, 127, 118, 157, 215, 225, 227, 232, 231, 232, 232, 232, 233, 234, 234, 235, 
			128, 151, 193, 216, 224, 223, 228, 232, 231, 232, 232, 232, 233, 233, 235, 236, 
			204, 210, 219, 219, 221, 224, 226, 232, 231, 233, 234, 234, 237, 231, 216, 219, 
			213, 213, 215, 217, 221, 227, 230, 232, 229, 219, 209, 197, 186, 178, 166, 154, 
			216, 215, 216, 217, 220, 232, 234, 218, 207, 193, 182, 159, 139, 124, 112, 106, 
			216, 215, 215, 215, 219, 224, 206, 184, 171, 160, 147, 132, 113, 105,  97,  97, 
			216, 216, 215, 219, 214, 195, 167, 150, 136, 130, 118, 115, 112, 112, 116, 118, 
			217, 216, 216, 217, 182, 146, 134, 124, 120, 111, 111, 115, 119, 119, 116, 112, 
			214, 213, 215, 183, 130, 116, 124, 116, 120, 111, 111, 110, 108, 102,  94,  95, 
			206, 212, 202, 144, 118, 125, 120, 118, 117, 115, 113, 110, 102,  97,  92,  97, 
			211, 210, 180, 130, 123, 122, 109, 113, 108, 116, 114, 116, 115, 116, 116, 117, 
			196, 197, 165, 133, 125, 105,  97, 111, 110, 117, 116, 122, 121, 115, 111, 107, 
			156, 175, 176, 139, 115,  89,  93, 119, 117, 123, 120, 120, 115, 106,  94,  87, 
			133, 135, 158, 162, 121,  85,  97, 125, 121, 130, 121, 110, 102, 102,  95,  84, 
			106, 101, 112, 154, 132,  81,  97, 129, 123, 135, 122, 106, 100, 100,  92,  78, 
			100, 105, 105, 112, 109,  81,  96, 129, 123, 131, 122, 106,  90,  83,  74,  66
		};
		
		Vector[] mVectors = new Vector[] { new Vector(-2, 1, 0),
				new Vector(-7, 3, 0) };
		Interpolator interpolator = new Interpolator();
		int[] interpolated = interpolator.interpolateLuma(ref1, 32, 32);

		InterPredictionBuilder builder = new InterPredictionBuilder();
		Picture[] reference = new Picture[] { new Picture(256,
				256, new int[][] {interpolated}, ColorSpace.YUV420) };
		int[] actual = builder
				.predict8x16(reference, mVectors, new Point(0, 0));
		assertArrayEquals(expected, actual);
	}
	
	@Test
	public void testMB8x8() {
		int[] expected = new int[] {
			236, 236, 236, 236, 236, 235, 235, 235, 233, 232, 232, 230, 230, 218, 206, 201, 
			236, 236, 236, 236, 238, 238, 238, 238, 238, 238, 237, 236, 238, 227, 215, 204, 
			209, 207, 200, 193, 207, 207, 206, 204, 205, 205, 205, 207, 218, 217, 210, 204, 
			132, 127, 113, 101, 129, 131, 129, 124, 127, 140, 148, 153, 172, 185, 186, 186, 
			 99,  97,  92,  86,  87,  89,  88,  82,  87,  96, 109, 125, 146, 161, 173, 181, 
			 99, 100, 103, 105,  99,  96,  94,  89,  97,  89,  83, 100, 131, 143, 164, 189, 
			122, 123, 123, 123, 118, 112, 109, 104, 111, 107,  86,  81, 111, 123, 137, 170, 
			104, 103, 109, 113, 117, 115, 115, 111, 107, 112, 109,  98,  97, 110, 128, 158, 
			 90,  94, 100, 107, 113, 114, 113, 113, 110, 104,  98, 104, 102, 111, 136, 165, 
			 99, 103, 106, 111, 115, 115, 114, 113, 109,  95,  85,  78, 106, 118, 142, 173, 
			120, 120, 120, 117, 116, 116, 115, 113, 108,  98,  92,  84,  98, 131, 167, 192, 
			102, 100, 108, 118, 118, 115, 115, 114, 109, 107, 104, 105, 110, 157, 191, 205, 
			 88,  85,  90, 103, 113, 115, 113, 117, 112, 103,  97, 102, 108, 147, 205, 202, 
			 91,  80,  80,  92, 107, 117, 119, 108,  98,  84,  86,  89,  98, 147, 204, 200, 
			 82,  69,  67,  86, 103, 115, 126, 116,  74,  63,  82,  90,  97, 148, 203, 201, 
			 67,  65,  70,  92, 107, 118, 131, 122,  72,  50,  65,  77, 100, 156, 199, 205
		};
		
		Vector[][] mVectors = new Vector[][] {
				new Vector[] { new Vector(-10, 4, 0), new Vector(-10, 3, 0) },
				new Vector[] { new Vector(-6, 3, 0), new Vector(-5, 2, 0) },
				new Vector[] { new Vector(-13, 4, 0) },
				new Vector[] { new Vector(-13, 1, 0), new Vector(-4, 1, 0),
						new Vector(-12, 1, 0), new Vector(-7, 4, 0) } };

		InterPredictionBuilder builder = new InterPredictionBuilder();
		SubMBType[] subPred = new SubMBType[] { L0_4x8, L0_4x8, L0_8x8, L0_4x4 };
		Interpolator interpolator = new Interpolator();
		int[] interpolated = interpolator.interpolateLuma(ref1, 32, 32);

		Picture[] reference = new Picture[] { new Picture(256,
				256, new int[][] {interpolated}, ColorSpace.YUV420) };
		int[] actual = builder.predict8x8(reference, subPred, mVectors,
				new Point(16, 0));
		assertArrayEquals(expected, actual);
	}
}