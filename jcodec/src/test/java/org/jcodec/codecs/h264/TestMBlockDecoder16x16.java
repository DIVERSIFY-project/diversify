package org.jcodec.codecs.h264;

import org.jcodec.codecs.h264.decode.MBlockDecoderI16x16;
import org.jcodec.codecs.h264.decode.model.DecodedMBlock;
import org.jcodec.codecs.h264.decode.model.NearbyPixels;
import org.jcodec.codecs.h264.decode.model.NearbyPixels.Plane;
import org.jcodec.codecs.h264.io.model.CodedChroma;
import org.jcodec.codecs.h264.io.model.MBlockIntra16x16;
import org.jcodec.codecs.h264.io.model.ResidualBlock;
import org.junit.Test;

public class TestMBlockDecoder16x16 extends JAVCTestCase {
	
	@Test
	public void testMB88() throws Exception {
	
		int[] expected = new int[] {
			31, 135, 208, 210, 206, 206, 206, 206, 206, 206, 206, 205, 209, 209, 209, 209,
			31, 135, 208, 210, 206, 206, 206, 206, 206, 206, 206, 205, 209, 209, 209, 209,
			31, 135, 208, 210, 206, 206, 206, 206, 206, 206, 206, 205, 209, 209, 209, 209,
			31, 135, 208, 210, 206, 206, 206, 206, 206, 206, 206, 205, 209, 209, 209, 209,
			29, 133, 206, 208, 204, 204, 204, 204, 204, 204, 204, 203, 207, 207, 207, 207,
			29, 133, 206, 208, 204, 204, 204, 204, 204, 204, 204, 203, 207, 207, 207, 207,
			29, 133, 206, 208, 204, 204, 204, 204, 204, 204, 204, 203, 207, 207, 207, 207,
			29, 133, 206, 208, 204, 204, 204, 204, 204, 204, 204, 203, 207, 207, 207, 207,
			27, 131, 204, 206, 202, 202, 202, 202, 202, 202, 202, 201, 205, 205, 205, 205,
			27, 131, 204, 206, 202, 202, 202, 202, 202, 202, 202, 201, 205, 205, 205, 205,
			27, 131, 204, 206, 202, 202, 202, 202, 202, 202, 202, 201, 205, 205, 205, 205,
			27, 131, 204, 206, 202, 202, 202, 202, 202, 202, 202, 201, 205, 205, 205, 205,
			30, 132, 200, 199, 200, 200, 200, 200, 200, 200, 200, 199, 203, 203, 203, 203,
			30, 132, 200, 199, 200, 200, 200, 200, 200, 200, 200, 199, 203, 203, 203, 203,
			30, 132, 200, 199, 200, 200, 200, 200, 200, 200, 200, 199, 203, 203, 203, 203,
			30, 132, 200, 199, 200, 200, 200, 200, 200, 200, 200, 199, 203, 203, 203, 203
		};
		
		int[] mb87 = new int[] {
			 90,  90,  90,  91,  90, 100, 114, 118, 101, 116, 156, 191, 204, 199, 199, 181,
			 91,  90,  90,  90,  87,  95, 107, 114, 121,  98, 104, 144, 182, 199, 206, 186,
			 92,  91,  90,  90,  86,  89,  95, 100, 106, 117, 103, 100, 136, 167, 190, 185,
			 92,  92,  91,  90,  87,  86,  87,  90,  79, 108, 119, 114, 101, 109, 155, 181,
			 93,  93,  92,  91,  90,  88,  87,  88,  89,  87,  89, 104, 119, 109, 105, 123,
			 89,  93,  93,  92,  91,  90,  88,  87,  88,  88,  89,  87, 105, 113, 112,  99,
			 84,  89,  93,  93,  92,  91,  90,  88,  88,  88,  88,  88,  79,  95, 107, 111,
			 83,  84,  89,  93,  93,  92,  91,  90,  89,  88,  88,  88,  92,  87,  89, 102,
			 72,  76,  83,  89,  92,  92,  93,  93,  92,  91,  89,  88,  88,  89,  90,  89,
			 71,  77,  83,  87,  93,  93,  94,  94,  94,  93,  92,  91,  90,  89,  88,  89,
			 77,  78,  86,  90,  94,  94,  94,  94,  94,  94,  94,  93,  92,  91,  90,  89,
			 82,  81,  85,  90,  94,  94,  94,  94,  94,  94,  94,  94,  94,  93,  92,  91,
			 76,  82,  93,  99,  98,  96,  94,  92,  91,  90,  89,  88,  96,  95,  92,  89,
			 82,  89,  94,  97,  94,  92,  90,  89,  89,  88,  88,  88,  93,  92,  89,  89,
			 93,  94,  93,  91,  90,  89,  88,  88,  88,  88,  88,  88,  93,  90,  86,  86,
			 99,  97,  91,  88,  88,  88,  88,  88,  88,  88,  88,  88,  93,  90,  86,  84
		};
		
		int[] mb77 = new int[] {
			 32, 136, 209, 211, 202, 202, 207, 209, 211, 211, 211, 211, 207, 207, 207, 207,
			 32, 136, 209, 211, 202, 202, 207, 209, 209, 209, 209, 209, 207, 207, 207, 207,
			 32, 136, 209, 211, 202, 202, 207, 209, 204, 204, 204, 204, 207, 207, 207, 207,
			 32, 136, 209, 211, 202, 202, 207, 209, 201, 201, 201, 201, 207, 207, 207, 207,
			 28, 132, 205, 207, 209, 208, 204, 203, 208, 198, 200, 210, 196, 197, 198, 198,
			 28, 132, 205, 207, 207, 208, 209, 208, 211, 205, 203, 207, 201, 199, 200, 201,
			 28, 132, 205, 207, 207, 207, 207, 208, 207, 208, 200, 191, 203, 206, 204, 205,
			 28, 132, 205, 207, 207, 207, 207, 207, 204, 209, 197, 182, 194, 205, 208, 206,
			 28, 132, 205, 207, 207, 207, 207, 207, 206, 206, 205, 196, 201, 203, 206, 206,
			 28, 132, 205, 207, 207, 207, 207, 207, 207, 206, 206, 205, 206, 206, 206, 206,
			 28, 132, 205, 207, 207, 207, 207, 207, 207, 207, 206, 206, 206, 206, 206, 206,
			 28, 132, 205, 207, 207, 207, 207, 207, 207, 207, 207, 206, 206, 206, 206, 206,
			 28, 132, 205, 207, 207, 207, 207, 207, 207, 207, 207, 206, 206, 206, 206, 206,
			 28, 132, 205, 207, 207, 207, 207, 207, 207, 207, 207, 206, 206, 206, 206, 206,
			 28, 132, 205, 207, 207, 207, 207, 207, 207, 207, 207, 206, 206, 206, 206, 206,
			 28, 132, 205, 207, 207, 207, 207, 207, 207, 207, 207, 206, 206, 206, 206, 206
		};
		
		int[] mb76 = new int[] {
			206, 206, 206, 206, 203, 203, 203, 203, 206, 207, 208, 208,208, 208, 207, 191,
			206, 206, 206, 206, 203, 203, 203, 203, 203, 204, 206, 207,208, 208, 207, 191,
			206, 206, 206, 206, 203, 203, 203, 203, 203, 203, 203, 204,208, 208, 207, 191,
			206, 206, 206, 206, 203, 203, 203, 203, 203, 203, 203, 203,208, 208, 207, 191,
			204, 204, 204, 204, 200, 200, 200, 200, 202, 202, 202, 202,208, 208, 207, 191,
			204, 204, 204, 204, 200, 200, 200, 200, 202, 202, 202, 202,208, 208, 207, 191,
			204, 204, 204, 204, 200, 200, 200, 200, 202, 202, 202, 202,208, 208, 207, 191,
			204, 204, 204, 204, 200, 200, 200, 200, 202, 202, 202, 202,208, 208, 207, 191,
			193, 208, 208, 205, 196, 196, 196, 196, 199, 199, 199, 199,204, 204, 203, 187,
			143, 181, 201, 208, 196, 196, 196, 196, 199, 199, 199, 199,204, 204, 203, 187,
			 92, 120, 171, 204, 196, 196, 196, 196, 199, 199, 199, 199,204, 204, 203, 187,
			108,  92, 107, 153, 196, 196, 196, 196, 199, 199, 199, 199,204, 204, 203, 187,
			108, 110, 108, 104, 126, 181, 202, 192, 187, 192, 198, 200,204, 204, 203, 187,
			 99, 103, 108, 110,  98, 121, 165, 197, 203, 203, 200, 198,204, 204, 203, 187,
			 93,  96,  99, 103, 113,  98, 111, 150, 193, 201, 198, 197,204, 204, 203, 187,
			 94,  93,  93,  96,  99, 108,  99, 106, 142, 178, 193, 197,204, 204, 203, 187
		};
		
		ResidualBlock lumaDC = new ResidualBlock(new int[] {-2, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,});
		ResidualBlock[] lumaAC = new ResidualBlock[] {
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
		};
		
		ResidualBlock cbDC = new ResidualBlock(new int[] { 0, 0, 0, 0 });
		ResidualBlock[] cbAC = new ResidualBlock[] { null, null, null, null };

		ResidualBlock crDC = new ResidualBlock(new int[] { 1, 0, 0, 0 });
		ResidualBlock[] crAC = new ResidualBlock[] { null, null, null, null };

		CodedChroma chroma = new CodedChroma(cbDC, cbAC, crDC, crAC, null, null);
		MBlockIntra16x16 mBlock = new MBlockIntra16x16(chroma, 0, lumaDC,
				lumaAC, null, 0, 0);

		MBlockDecoderI16x16 mbDecoder = new MBlockDecoderI16x16(new int[] { 0,
				0 }, 8, 8);
		Plane chromaPlane = new NearbyPixels.Plane(null, null, null, null);

		NearbyPixels near = new NearbyPixels(new NearbyPixels.Plane(mb87, mb77,
				mb76, null), chromaPlane, chromaPlane);
		DecodedMBlock decodeI16x16 = mbDecoder.decodeI16x16(mBlock, 28, near);

		assertArrayEquals(expected, decodeI16x16.getLuma(), 256);
	}
	
	
	@Test
	public void testMBZero() throws Exception {
	
		int[] expected = new int[] {
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147
		};
		
		ResidualBlock lumaDC = new ResidualBlock(new int[] { 16, -2, 0, 0, 0,
				0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0 });
		ResidualBlock[] lumaAC = new ResidualBlock[] { null, null, null, null,
				null, null, null, null, null, null, null, null, null, null,
				null, null };

		ResidualBlock cbDC = new ResidualBlock(new int[] { 0, 0, 0, 0 });
		ResidualBlock[] cbAC = new ResidualBlock[] { null, null, null, null, };

		ResidualBlock crDC = new ResidualBlock(new int[] { -4, 0, 0, 0, });
		ResidualBlock[] crAC = new ResidualBlock[] { null, null, null, null };

		CodedChroma chroma = new CodedChroma(cbDC, cbAC, crDC, crAC, null, null);
		MBlockIntra16x16 mBlock = new MBlockIntra16x16(chroma, 0, lumaDC,
				lumaAC, null, 2, 0);

		MBlockDecoderI16x16 mbDecoder = new MBlockDecoderI16x16(new int[] { 0,
				0 }, 8, 8);

		NearbyPixels.Plane plane = new NearbyPixels.Plane(null, null, null,
				null);
		NearbyPixels near = new NearbyPixels(plane, plane, plane);

		DecodedMBlock decodeI16x16 = mbDecoder.decodeI16x16(mBlock, 28, near);

		assertArrayEquals(expected, decodeI16x16.getLuma(), 256);
	}
	
	@Test
	public void testMBFirst() throws Exception {
	
		int[] expected = new int[] {
			148, 148, 148, 148, 146, 146, 146, 146, 144, 144, 144, 144, 142, 142, 142, 142,
			148, 148, 148, 148, 146, 146, 146, 146, 144, 144, 144, 144, 142, 142, 142, 142,
			148, 148, 148, 148, 146, 146, 146, 146, 144, 144, 144, 144, 142, 142, 142, 142,
			148, 148, 148, 148, 146, 146, 146, 146, 144, 144, 144, 144, 142, 142, 142, 142,
			146, 146, 146, 146, 144, 144, 144, 144, 142, 142, 142, 142, 140, 140, 140, 140,
			146, 146, 146, 146, 144, 144, 144, 144, 142, 142, 142, 142, 140, 140, 140, 140,
			146, 146, 146, 146, 144, 144, 144, 144, 142, 142, 142, 142, 140, 140, 140, 140,
			146, 146, 146, 146, 144, 144, 144, 144, 142, 142, 142, 142, 140, 140, 140, 140,
			144, 144, 144, 144, 142, 142, 142, 142, 140, 140, 140, 140, 138, 138, 138, 138,
			144, 144, 144, 144, 142, 142, 142, 142, 140, 140, 140, 140, 138, 138, 138, 138,
			144, 144, 144, 144, 142, 142, 142, 142, 140, 140, 140, 140, 138, 138, 138, 138,
			144, 144, 144, 144, 142, 142, 142, 142, 140, 140, 140, 140, 138, 138, 138, 138,
			142, 142, 142, 142, 140, 140, 140, 140, 138, 138, 138, 138, 136, 136, 136, 136,
			142, 142, 142, 142, 140, 140, 140, 140, 138, 138, 138, 138, 136, 136, 136, 136,
			142, 142, 142, 142, 140, 140, 140, 140, 138, 138, 138, 138, 136, 136, 136, 136,
			142, 142, 142, 142, 140, 140, 140, 140, 138, 138, 138, 138, 136, 136, 136, 136
		};
		
		int[] mb0 = new int[] {
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147,
			141, 141, 141, 141, 143, 143, 143, 143, 145, 145, 145, 145, 147, 147, 147, 147
		};
		
		ResidualBlock lumaDC = new ResidualBlock(new int[] { -5, 2, 2, 0, 0, 0,
				1, 0, 0, 1, 0, 0, 0, 0, 0, 0 });
		ResidualBlock[] lumaAC = new ResidualBlock[] { null, null, null, null,
				null, null, null, null, null, null, null, null, null, null,
				null, null };

		ResidualBlock cbDC = null;
		ResidualBlock[] cbAC = new ResidualBlock[] { null, null, null, null, };

		ResidualBlock crDC = null;
		ResidualBlock[] crAC = new ResidualBlock[] { null, null, null, null };

		CodedChroma chroma = new CodedChroma(cbDC, cbAC, crDC, crAC, null, null);
		MBlockIntra16x16 mBlock = new MBlockIntra16x16(chroma, 0, lumaDC,
				lumaAC, null, 1, 0);

		Plane chromaPlane = new NearbyPixels.Plane(null, null, null, null);

		NearbyPixels near = new NearbyPixels(new NearbyPixels.Plane(mb0, null,
				null, null), chromaPlane, chromaPlane);

		MBlockDecoderI16x16 mbDecoder = new MBlockDecoderI16x16(new int[] { 0,
				0 }, 8, 8);
		DecodedMBlock decodeI16x16 = mbDecoder.decodeI16x16(mBlock, 28, near);

		assertArrayEquals(expected, decodeI16x16.getLuma(), 256);
	}
	
	public void testMB80() throws Exception {
		int[] expected = new int[] {
			132, 130, 129, 127, 123, 119, 112, 108, 105, 103, 102, 100, 100, 99, 111, 124,
			134, 132, 130, 128, 127, 123, 116, 113, 110, 108, 106, 104, 105, 102, 112, 124,
			134, 132, 130, 128, 132, 128, 121, 117, 114, 112, 110, 108, 111, 105, 109, 117,
			137, 135, 133, 131, 136, 132, 125, 121, 119, 117, 115, 113, 116, 108, 110, 116,
			139, 135, 128, 124, 129, 128, 126, 124, 124, 122, 120, 118, 121, 113, 111, 116,
			143, 139, 133, 129, 132, 130, 128, 126, 126, 124, 123, 121, 124, 115, 113, 118,
			148, 144, 137, 133, 132, 130, 128, 127, 126, 124, 122, 120, 124, 115, 113, 119,
			152, 148, 141, 138, 134, 132, 130, 128, 128, 126, 124, 123, 126, 117, 115, 120,
			181, 161, 141, 139, 137, 135, 133, 131, 127, 125, 123, 121, 121, 119, 117, 115,
			185, 170, 150, 143, 139, 138, 136, 134, 131, 129, 127, 125, 125, 124, 122, 120,
			189, 183, 164, 148, 139, 137, 135, 133, 135, 133, 132, 130, 130, 128, 126, 124,
			194, 192, 172, 152, 141, 139, 138, 136, 140, 138, 136, 134, 134, 132, 131, 129,
			184, 182, 180, 179, 149, 139, 133, 137, 138, 136, 134, 133, 133, 131, 129, 127,
			189, 187, 185, 183, 158, 146, 138, 140, 141, 139, 137, 135, 135, 133, 131, 129,
			193, 191, 189, 187, 173, 159, 145, 144, 140, 138, 136, 134, 134, 133, 131, 129,
			197, 196, 194, 192, 183, 166, 150, 147, 142, 141, 139, 137, 137, 135, 133, 131
		};
		
		int[] mb79 = new int[] {
			200, 200, 200, 200, 192, 192, 192, 192, 193, 190, 186, 184, 162, 149, 136, 137,
			200, 200, 200, 200, 192, 192, 192, 192, 193, 190, 186, 184, 169, 154, 139, 139,
			200, 200, 200, 200, 192, 192, 192, 192, 193, 190, 186, 184, 184, 166, 145, 142,
			200, 200, 200, 200, 192, 192, 192, 192, 193, 190, 186, 184, 191, 172, 149, 144,
			202, 202, 202, 202, 197, 197, 197, 197, 194, 192, 188, 185, 183, 183, 168, 154,
			202, 202, 202, 202, 197, 197, 197, 197, 194, 192, 188, 185, 185, 186, 174, 161,
			202, 202, 202, 202, 197, 197, 197, 197, 194, 192, 188, 185, 188, 192, 186, 176,
			202, 202, 202, 202, 197, 197, 197, 197, 194, 192, 188, 185, 190, 195, 192, 183,
			204, 204, 204, 204, 199, 199, 199, 199, 192, 192, 192, 192, 190, 190, 190, 190,
			204, 204, 204, 204, 199, 199, 199, 199, 192, 192, 192, 192, 190, 190, 190, 190,
			204, 204, 204, 204, 199, 199, 199, 199, 192, 192, 192, 192, 190, 190, 190, 190,
			204, 204, 204, 204, 199, 199, 199, 199, 192, 192, 192, 192, 190, 190, 190, 190,
			202, 202, 202, 202, 200, 200, 200, 200, 197, 197, 197, 197, 192, 192, 192, 192,
			202, 202, 202, 202, 200, 200, 200, 200, 197, 197, 197, 197, 192, 192, 192, 192,
			202, 202, 202, 202, 200, 200, 200, 200, 197, 197, 197, 197, 192, 192, 192, 192,
			202, 202, 202, 202, 200, 200, 200, 200, 197, 197, 197, 197, 192, 192, 192, 192
		};
		
		int[] mb69 = new int[] {
			90, 88, 83, 81, 71, 71, 71, 71, 72, 83, 118, 143, 131, 136, 132, 122,
			83, 85, 90, 92, 78, 78, 78, 78, 84, 76, 102, 137, 127, 132, 127, 118,
			88, 90, 94, 97, 91, 91, 91, 91, 92, 75, 85, 111, 118, 123, 118, 109,
			99, 97, 92, 90, 98, 98, 98, 98, 89, 82, 83, 90, 113, 118, 114, 104,
			107, 104, 100, 98, 100, 100, 100, 100, 95, 91, 82, 77, 71, 78, 84, 105,
			107, 104, 100, 98, 100, 100, 100, 100, 95, 91, 82, 77, 65, 56, 59, 93,
			107, 104, 100, 98, 100, 100, 100, 100, 95, 91, 82, 77, 75, 64, 61, 92,
			107, 104, 100, 98, 100, 100, 100, 100, 95, 91, 82, 77, 69, 70, 65, 80,
			113, 113, 113, 113, 108, 106, 102, 99, 94, 92, 88, 85, 78, 71, 71, 78,
			113, 113, 113, 113, 108, 106, 102, 99, 94, 92, 88, 85, 71, 64, 64, 71,
			113, 113, 113, 113, 108, 106, 102, 99, 94, 92, 88, 85, 71, 64, 64, 71,
			113, 113, 113, 113, 108, 106, 102, 99, 94, 92, 88, 85, 78, 71, 71, 78,
			126, 124, 119, 117, 114, 111, 107, 105, 94, 94, 94, 94, 78, 86, 85, 75,
			126, 124, 119, 117, 114, 111, 107, 105, 96, 96, 96, 96, 91, 91, 84, 76,
			126, 124, 119, 117, 114, 111, 107, 105, 101, 101, 101, 101, 98, 93, 91, 95,
			126, 124, 119, 117, 114, 111, 107, 105, 103, 103, 103, 103, 93, 89, 100, 114
		};
		
		int[] mb68 = new int[] {
			187, 185, 166, 144, 133, 128, 122, 116, 109, 107, 107, 104, 96, 93, 93, 90,
			188, 187, 171, 152, 138, 132, 126, 120, 114, 111, 111, 108, 100, 97, 97, 94,
			188, 190, 182, 166, 145, 139, 133, 128, 121, 118, 117, 115, 107, 104, 104, 101,
			188, 192, 188, 174, 149, 143, 137, 132, 125, 121, 122, 119, 111, 107, 108, 105,
			188, 185, 186, 183, 184, 158, 135, 132, 129, 127, 126, 123, 115, 113, 112, 109,
			189, 186, 187, 184, 185, 165, 142, 133, 130, 128, 127, 124, 117, 114, 113, 110,
			190, 188, 188, 185, 186, 178, 155, 134, 132, 129, 128, 125, 118, 115, 114, 112,
			192, 189, 189, 186, 188, 185, 161, 136, 133, 130, 129, 127, 119, 116, 115, 113,
			198, 195, 194, 192, 188, 185, 185, 183, 146, 132, 128, 132, 120, 117, 117, 114,
			199, 196, 195, 193, 189, 186, 187, 184, 153, 137, 130, 132, 121, 119, 118, 115,
			200, 197, 197, 194, 190, 188, 188, 185, 167, 149, 133, 132, 122, 120, 119, 116,
			201, 199, 198, 195, 191, 189, 189, 186, 176, 154, 135, 132, 124, 121, 120, 118,
			203, 198, 192, 186, 189, 186, 185, 182, 189, 183, 158, 135, 134, 131, 130, 128,
			205, 199, 193, 188, 190, 187, 186, 184, 189, 185, 164, 142, 135, 132, 132, 129,
			206, 200, 194, 189, 191, 188, 188, 185, 189, 188, 175, 156, 136, 134, 133, 130,
			207, 201, 196, 190, 192, 189, 189, 186, 189, 191, 181, 164, 137, 135, 134, 131
		};
		
		ResidualBlock lumaDC = new ResidualBlock(new int[] {-23, 4, 7, 1, -4, 5, 3, -3, 2, 4, -1, 1, -4, 0, 0, -1});
		ResidualBlock[] lumaAC = new ResidualBlock[] {
			new ResidualBlock(new int[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {-2, 1, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {4, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {2, -1, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
		};
		
		ResidualBlock cbDC = new ResidualBlock(new int[] {2, -1, 0, 0});
		ResidualBlock[] cbAC = new ResidualBlock[] {
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
		};
		
		ResidualBlock crDC = new ResidualBlock(new int[] {-1, 0, 0, -1});
		ResidualBlock[] crAC = new ResidualBlock[] {
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {-1, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),
			new ResidualBlock(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
		};

		CodedChroma chroma = new CodedChroma(cbDC, cbAC, crDC, crAC, null, null);
		MBlockIntra16x16 mBlock = new MBlockIntra16x16(chroma, 0, lumaDC,
				lumaAC, null, 3, 0);

		MBlockDecoderI16x16 mbDecoder = new MBlockDecoderI16x16(new int[] { 0,
				0 }, 8, 8);
		Plane chromaPlane = new NearbyPixels.Plane(null, null, null, null);

		NearbyPixels near = new NearbyPixels(new NearbyPixels.Plane(mb79, mb69,
				mb68, null), chromaPlane, chromaPlane);
		DecodedMBlock decodeI16x16 = mbDecoder.decodeI16x16(mBlock, 27, near);

		assertArrayEquals(expected, decodeI16x16.getLuma(), 256);
	}
}