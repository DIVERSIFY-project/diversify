package org.jcodec.codecs.h264;

import org.jcodec.codecs.h264.decode.MBlockDecoderI4x4;
import org.jcodec.codecs.h264.decode.model.DecodedMBlock;
import org.jcodec.codecs.h264.decode.model.NearbyPixels;
import org.jcodec.codecs.h264.decode.model.NearbyPixels.Plane;
import org.jcodec.codecs.h264.io.model.CodedChroma;
import org.jcodec.codecs.h264.io.model.IntraNxNPrediction;
import org.jcodec.codecs.h264.io.model.MBlockIntraNxN;
import org.jcodec.codecs.h264.io.model.MBlockWithResidual;
import org.jcodec.codecs.h264.io.model.ResidualBlock;

public class TestMBlockDecoderNxN extends JAVCTestCase {

	public void testMB58() throws Exception {
		int[] expected = new int[] {
			108, 109, 109, 109, 115, 113, 109, 107, 120, 117, 117, 116, 118, 136, 144, 139,
			106, 107, 108, 109, 115, 113, 109, 107, 120, 122, 121, 116, 118, 136, 144, 139,
			104, 105, 106, 107, 115, 113, 109, 107, 120, 131, 130, 116, 118, 136, 144, 139,
			100, 102, 104, 105, 115, 113, 109, 107, 120, 135, 135, 116, 118, 136, 144, 139,
		
			 94,  95,  97,  99, 106, 112, 113, 110, 118, 127, 114,  90,  98, 134, 139, 135,
			 93,  94,  94,  95, 100, 106, 112, 113, 121, 124, 108,  89, 105, 136, 137, 136,
			 90,  91,  93,  94,  96, 100, 106, 112, 121, 116, 101,  91, 120, 138, 135, 139,
			 83,  86,  90,  91,  94,  96, 100, 106, 121, 112,  98,  94, 127, 140, 133, 141,

			 82,  84,  88,  90,  91,  88,  96, 109, 122, 116, 104,  99, 127, 132, 137, 143,
			 72,  77,  82,  84,  88,  86,  93, 105, 120, 117, 112, 109, 126, 130, 137, 141,
			 63,  67,  72,  77,  83,  83,  91, 102, 118, 121, 126, 129, 123, 126, 134, 136,
			 57,  60,  63,  67,  75,  78,  88, 100, 117, 122, 134, 140, 121, 125, 132, 134,

			 47,  49,  53,  57,  67,  74,  80,  89, 109, 120, 126, 135, 131, 123, 129, 133,
			 53,  50,  47,  49,  58,  67,  74,  80, 102, 114, 126, 136, 134, 127, 126, 131,
			 66,  59,  53,  50,  51,  58,  67,  74,  88, 111, 129, 141, 137, 131, 123, 129,
			 81,  73,  66,  59,  52,  51,  58,  67,  79, 105, 127, 142, 137, 134, 127, 126
		};

		int[] mb57 = new int[] {
			 85,  86,  89,  92,  94,  97, 101, 102, 104, 105, 106, 107, 107, 107, 107, 107,
			 72,  78,  85,  86,  86,  90,  94,  97, 100, 102, 104, 105, 105, 105, 105, 105,
			 56,  64,  72,  78,  79,  83,  86,  90,  94,  97, 100, 102, 102, 102, 102, 102,
			 50,  53,  56,  64,  68,  74,  79,  83,  87,  90,  94,  97,  97,  97,  97,  97,

			 62,  56,  50,  51,  59,  63,  70,  75,  79,  82,  87,  90,  94,  95,  97,  97,
			 83,  71,  59,  53,  51,  54,  57,  61,  68,  74,  79,  82,  86,  90,  94,  95,
			103,  91,  79,  67,  54,  50,  46,  49,  55,  62,  68,  74,  78,  82,  86,  90,
			114, 107, 101,  89,  70,  61,  52,  48,  49,  52,  55,  62,  68,  73,  78,  82,

			124, 116, 113, 107,  91,  82,  66,  54,  43,  45,  50,  55,  59,  62,  68,  73,
			128, 121, 116, 112, 103,  97,  91,  82,  60,  54,  48,  48,  52,  55,  59,  62,
			133, 126, 120, 116, 107, 105, 103,  97,  84,  71,  57,  48,  48,  50,  52,  55,
			138, 130, 125, 119, 111, 109, 107, 105,  95,  86,  76,  62,  55,  52,  48,  50,

			155, 133, 127, 130, 119, 114, 112, 110, 101,  97,  88,  79,  68,  62,  53,  49,
			164, 142, 132, 131, 124, 117, 113, 111, 104, 102, 101,  97,  85,  76,  68,  62,
			177, 153, 140, 129, 132, 119, 114, 112, 105, 104, 104, 102,  97,  91,  85,  76,
			181, 166, 149, 130, 134, 124, 117, 113, 106, 105, 105, 104, 100,  98,  97,  91
		};

		int[] mb46 = new int[] {
			209, 206, 218, 222, 219, 216, 222, 214, 204, 183, 162, 158, 139, 135, 168, 205,
			211, 217, 220, 209, 202, 187, 174, 168, 142, 138, 133, 138, 145, 142, 164, 190,
			219, 210, 186, 170, 153, 143, 132, 130, 138, 143, 148, 148, 154, 151, 152, 155,
			163, 148, 137, 141, 142, 144, 148, 150, 146, 146, 146, 146, 124, 122, 111, 104,

			135, 139, 146, 139, 144, 138, 133, 128, 119, 112, 106, 105, 105, 105, 105, 105,
			147, 140, 135, 128, 121, 116, 112, 109, 106, 105, 105, 107, 107, 107, 107, 107,
			127, 120, 115, 118, 107, 104, 102, 102, 105, 107, 108, 108, 108, 108, 108, 108,
			 98, 101, 106, 109, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108,

			102, 106, 108, 108, 108, 108, 108, 108, 113, 113, 113, 113, 113, 113, 113, 113,
			106, 108, 108, 108, 108, 108, 108, 108, 113, 113, 113, 113, 113, 113, 113, 113,
			108, 108, 108, 108, 108, 108, 108, 108, 113, 113, 113, 113, 113, 113, 113, 113,
			108, 108, 108, 108, 108, 108, 108, 108, 113, 113, 113, 113, 113, 113, 113, 113,

			107, 106, 105, 104, 106, 107, 108, 108, 109, 112, 113, 113, 113, 113, 113, 113,
			105, 106, 107, 106, 105, 106, 106, 107, 108, 109, 112, 113, 113, 113, 113, 113,
			 99, 102, 105, 106, 106, 106, 105, 106, 107, 108, 109, 112, 112, 112, 112, 112,
			 91,  95,  99, 102, 104, 105, 106, 106, 106, 107, 108, 109, 109, 109, 109, 109
		};

		int[] mb47 = new int[] {
			189, 175, 155, 139, 129, 132, 126, 114, 105,  96,  84,  77,  89, 103, 120, 126,
			197, 192, 166, 140, 133, 140, 132, 114, 102,  93,  82,  78,  94, 108, 121, 125,
			176, 186, 174, 155, 144, 145, 134, 115,  99,  90,  80,  80, 100, 114, 123, 125,
			127, 161, 177, 177, 161, 151, 134, 117,  96,  88,  81,  85, 105, 115, 122, 125,

			 97, 108, 141, 175, 170, 174, 159, 134, 114,  93,  79,  88,  99, 112, 125, 131,
			101, 105, 114, 124, 144, 162, 167, 151, 107,  88,  78,  89,  99, 112, 125, 131,
			110, 110, 112, 112, 102, 119, 120, 117,  94,  79,  75,  90,  99, 112, 125, 131,
			114, 113, 112, 110, 113, 117, 101,  99,  88,  74,  74,  91,  99, 112, 125, 131,

			113, 113, 113, 113, 111, 117, 116, 110,  90,  68,  61,  79,  93, 109, 128, 137,
			113, 113, 113, 113, 113, 111, 105,  95,  83,  68,  70,  85,  93, 109, 128, 137,
			113, 113, 113, 113, 113, 110, 108,  99,  88,  75,  73,  81,  93, 109, 128, 137,
			113, 113, 113, 113, 112, 114, 120, 122,  96,  86,  74,  74,  93, 109, 128, 137,

			113, 113, 113, 112, 119, 116, 112, 113, 113, 100,  86,  77,  80, 109, 135, 139,
			113, 112, 111, 110, 118, 116, 110, 109, 114, 113, 100,  86,  87, 113, 136, 138,
			111, 110, 109, 109, 116, 115, 110, 107, 110, 114, 113, 100, 100, 123, 138, 136,
			109, 109, 109, 109, 115, 113, 109, 107, 108, 110, 114, 113, 106, 127, 139, 136
		};

		int[] mb48 = new int[] {
			122, 122, 122, 122, 122, 125, 126, 124, 122, 119, 116, 115, 118, 116, 113, 111,
			122, 122, 122, 122, 125, 126, 124, 120, 115, 112, 111, 111, 103, 101,  99,  98,
			122, 122, 122, 122, 126, 124, 120, 117, 106, 105, 105, 105,  99,  98,  97,  97,
			122, 122, 122, 122, 124, 120, 117, 114, 102, 102, 102, 102, 107, 107, 107, 107,

			127, 127, 127, 127, 121, 113, 104,  98, 102, 102, 102, 102, 105, 104,  99,  96,
			127, 127, 127, 127, 121, 113, 104,  98, 102, 102, 102, 102, 104, 101,  98,  96,
			127, 127, 127, 127, 121, 113, 104,  98, 102, 102, 102, 102, 104, 100,  95,  95,
			127, 127, 127, 127, 121, 113, 104,  98, 102, 102, 102, 102, 104, 100,  94,  92,

			134, 130, 124, 121, 108, 103, 101,  98, 101,  95,  82,  76,  71,  71,  71,  71,
			134, 130, 124, 121, 111, 107, 104, 101,  92,  86,  75,  70,  65,  65,  65,  65,
			134, 130, 124, 121, 118, 113, 111, 108,  96,  92,  87,  85,  80,  80,  80,  80,
			134, 130, 124, 121, 121, 116, 114, 111, 110, 108, 107, 105, 100, 100, 100, 100,

			137, 134, 130, 125, 125, 125, 125, 125, 120, 116, 112, 110, 108, 105, 101, 100,
			138, 137, 134, 130, 130, 130, 130, 130, 126, 121, 116, 112, 111, 109, 108, 105,
			138, 138, 137, 134, 134, 134, 134, 134, 124, 122, 120, 115, 114, 112, 111, 109,
			137, 138, 138, 137, 137, 137, 137, 137, 125, 123, 121, 119, 117, 115, 114, 112 
		};

		IntraNxNPrediction prediction = new IntraNxNPrediction(new int[] { 6,
				0, 6, 4, 0, 0, 8, 0, 6, 4, 6, 4, 2, 7, 5, 5 }, 0);

		ResidualBlock cbDC = new ResidualBlock(new int[] { -1, 0, 0, 0 });
		ResidualBlock[] cbAC = new ResidualBlock[] {
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }) };
		ResidualBlock crDC = new ResidualBlock(new int[] { 2, 0, -1, 1 });
		ResidualBlock[] crAC = new ResidualBlock[] {
				new ResidualBlock(new int[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }) };

		CodedChroma chroma = new CodedChroma(cbDC, cbAC, crDC, crAC, null, null);

		ResidualBlock[] luma = new ResidualBlock[] {
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 3, 1, -1, 0, 0, -1, 0, 1, 0, 0,
						0, 0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 3, 0, 0, 0, -1, 0, -1, 0, 0,
						0, 0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { -1, 0, -1, 0, -1, 0, -1, -1, 0,
						0, 0, 0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, -1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 4, 0, -2, 0, 2, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { -2, -1, 1, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 1, -1, -1, 0, 1, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }) };
		
		MBlockWithResidual other = new MBlockWithResidual(0, chroma, null, luma) {
		};
		MBlockIntraNxN mBlockIntraNxN = new MBlockIntraNxN(other, prediction);

		MBlockDecoderI4x4 mBlockDecoder = new MBlockDecoderI4x4(new int[] { 0,
				0 }, 8, 8);
		int qp = 27;

		Plane chromaPlane = new NearbyPixels.Plane(null, null, null, null);

		NearbyPixels near = new NearbyPixels(new NearbyPixels.Plane(mb57, mb47,
				mb46, mb48), chromaPlane, chromaPlane);
		DecodedMBlock actual = mBlockDecoder.decodeINxN(mBlockIntraNxN, qp,
				near);

		assertArrayEquals(expected, actual.getLuma(), 256);
	}
	
	public void testMB154() throws Exception {
		IntraNxNPrediction prediction = new IntraNxNPrediction(new int[] { 0,
				0, 7, 7, 0, 0, 0, 0, 3, 3, 3, 8, 3, 0, 3, 0 }, 0);

		int qp = 28;
		
		ResidualBlock[] luma = new ResidualBlock[] {
				new ResidualBlock(new int[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),

				null,
				null,
				null,
				null,

				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),

				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }) };

		int[] expected = new int[] {
			36, 38, 40, 43, 49, 52, 54, 57, 65, 67, 70, 72, 75, 77, 79, 82,
			36, 38, 40, 43, 49, 52, 54, 57, 65, 67, 70, 72, 75, 77, 79, 82,
			36, 38, 40, 43, 49, 52, 54, 57, 65, 67, 70, 72, 75, 77, 79, 82,
			36, 38, 40, 43, 49, 52, 54, 57, 65, 67, 70, 72, 75, 77, 79, 82,
			37, 39, 42, 46, 51, 53, 56, 57, 65, 67, 70, 72, 75, 77, 79, 82,
			38, 40, 44, 48, 52, 54, 56, 57, 65, 67, 70, 72, 75, 77, 79, 82,
			39, 42, 46, 51, 53, 56, 57, 57, 65, 67, 70, 72, 75, 77, 79, 82,
			40, 44, 48, 52, 54, 56, 57, 57, 65, 67, 70, 72, 75, 77, 79, 82,
			
			44, 48, 52, 54, 56, 57, 59, 64, 67, 70, 72, 75, 78, 80, 82, 85,
			48, 52, 54, 56, 57, 59, 64, 67, 70, 72, 75, 77, 81, 83, 85, 88,
			52, 54, 56, 57, 59, 64, 67, 70, 72, 75, 77, 79, 86, 88, 90, 93,
			54, 56, 57, 57, 64, 67, 70, 72, 75, 77, 79, 81, 88, 90, 92, 95,
			
			60, 61, 63, 67, 72, 74, 76, 77, 81, 83, 86, 91, 91, 93, 95, 98,
			61, 63, 67, 71, 79, 80, 81, 82, 83, 86, 91, 94, 94, 96, 98, 101,
			63, 67, 71, 74, 86, 87, 87, 87, 86, 91, 94, 96, 99, 101, 103, 106,
			67, 71, 74, 76, 89, 89, 89, 89, 91, 94, 96, 98, 101, 103, 105, 108
		};
		
		int[] mb153 = new int[] {
			99, 97, 92, 89,76, 74, 69, 66, 54, 52, 48, 46,42, 42, 42, 42,
			99, 97, 92, 89,76, 74, 69, 66, 54, 52, 48, 46,42, 42, 42, 42,
			99, 97, 92, 89,76, 74, 69, 66, 54, 52, 48, 46,42, 42, 42, 42,
			99, 97, 92, 89,76, 74, 69, 66, 54, 52, 48, 46,42, 42, 42, 42,
			99, 97, 92, 89,76, 74, 69, 66, 54, 52, 48, 46,42, 42, 42, 42,
			99, 97, 92, 89,76, 74, 69, 66, 54, 52, 48, 46,42, 42, 42, 42,
			99, 97, 92, 89,76, 74, 69, 66, 54, 52, 48, 46,42, 42, 42, 42,
			99, 97, 92, 89,76, 74, 69, 66, 54, 52, 48, 46,42, 42, 42, 42,
			95, 93, 88, 85,80, 78, 73, 70, 60, 53, 50, 47,45, 43, 42, 42,
			95, 93, 88, 85,80, 78, 73, 70, 64, 57, 52, 49,47, 45, 43, 42,
			95, 93, 88, 85,80, 78, 73, 70, 69, 60, 53, 50,49, 47, 45, 43,
			95, 93, 88, 85,80, 78, 73, 70, 70, 64, 57, 52,50, 49, 47, 45,
			95, 93, 88, 85,84, 81, 77, 74, 70, 67, 61, 55,55, 55, 55, 55,
			95, 93, 88, 85,85, 84, 81, 77, 71, 69, 64, 58,58, 58, 58, 58,
			95, 93, 88, 85,85, 85, 84, 81, 74, 70, 67, 61,61, 61, 61, 61,
			95, 93, 88, 85,85, 85, 85, 84, 77, 71, 69, 64,64, 64, 64, 64
		};

		int[] mb113 = new int[] {
			91, 89, 84, 81,71, 71, 71, 71, 66, 65, 63, 62,58, 58, 58, 58,
			91, 89, 84, 81,71, 71, 71, 71, 66, 65, 63, 62,58, 58, 58, 58,
			91, 89, 84, 81,71, 71, 71, 71, 66, 65, 63, 62,58, 58, 58, 58,
			91, 89, 84, 81,71, 71, 71, 71, 66, 65, 63, 62,58, 58, 58, 58,
			91, 89, 84, 81,76, 74, 69, 66, 65, 63, 61, 59,54, 54, 54, 54,
			91, 89, 84, 81,76, 74, 69, 66, 63, 61, 59, 58,54, 54, 54, 54,
			91, 89, 84, 81,76, 74, 69, 66, 61, 59, 58, 58,54, 54, 54, 54,
			91, 89, 84, 81,76, 74, 69, 66, 59, 58, 58, 58,54, 54, 54, 54,
			91, 89, 84, 81,72, 70, 65, 62, 55, 54, 54, 54,46, 46, 46, 46,
			91, 89, 84, 81,72, 70, 65, 62, 55, 54, 54, 54,46, 46, 46, 46,
			91, 89, 84, 81,72, 70, 65, 62, 55, 54, 54, 54,46, 46, 46, 46,
			91, 89, 84, 81,72, 70, 65, 62, 55, 54, 54, 54,46, 46, 46, 46,
			95, 93, 88, 85,72, 70, 65, 62, 55, 54, 54, 50,46, 46, 46, 46,
			95, 93, 88, 85,72, 70, 65, 62, 54, 54, 52, 48,46, 46, 46, 46,
			95, 93, 88, 85,72, 70, 65, 62, 54, 54, 50, 46,46, 46, 46, 46,
			95, 93, 88, 85,72, 70, 65, 62, 54, 52, 48, 46,46, 46, 46, 46
		};

		int[] mb114 = new int[] {
			 60, 62, 64, 67, 69, 72, 74, 76, 77, 79, 82, 84, 86, 89, 91, 94,
			 59, 61, 63, 66, 68, 71, 73, 75, 76, 78, 81, 83, 85, 88, 90, 93,
			 57, 60, 62, 65, 67, 70, 72, 74, 75, 77, 80, 82, 84, 87, 89, 92,
			 56, 59, 61, 64, 66, 68, 71, 73, 74, 76, 78, 81, 83, 86, 88, 91,
			 55, 58, 60, 63, 65, 67, 70, 72, 77, 79, 81, 84, 86, 89, 91, 93,
			 54, 57, 59, 62, 64, 66, 69, 71, 76, 78, 80, 83, 85, 88, 90, 92,
			 53, 56, 58, 60, 63, 65, 68, 70, 74, 77, 79, 82, 84, 87, 89, 91,
			 52, 55, 57, 59, 62, 64, 67, 69, 73, 76, 78, 81, 83, 85, 88, 90,
			 51, 54, 56, 58, 61, 63, 66, 68, 72, 75, 77, 80, 82, 84, 87, 89,
			 50, 52, 55, 57, 60, 62, 64, 67, 71, 74, 76, 79, 81, 83, 86, 88,
			 49, 51, 54, 56, 59, 61, 63, 66, 70, 73, 75, 77, 80, 82, 85, 87,
			 48, 50, 53, 55, 58, 60, 62, 65, 69, 72, 74, 76, 79, 81, 84, 86,
			 43, 45, 48, 50, 52, 55, 57, 60, 68, 71, 73, 75, 78, 80, 83, 85,
			 42, 44, 47, 49, 51, 54, 56, 59, 67, 69, 72, 74, 77, 79, 81, 84,
			 41, 43, 46, 48, 50, 53, 55, 58, 66, 68, 71, 73, 76, 78, 80, 83,
			 40, 42, 44, 47, 49, 52, 54, 57, 65, 67, 70, 72, 75, 77, 79, 82,
		};
			 
		int[] mb115 = new int[] {
			 92, 93, 95, 97, 100, 102, 103, 105, 107, 108, 110, 112, 111, 113, 114, 116,
			 92, 93, 95, 97, 100, 102, 103, 105, 107, 108, 110, 112, 111, 113, 114, 116,
			 92, 93, 95, 97, 100, 102, 103, 105, 107, 108, 110, 112, 111, 113, 114, 116,
			 92, 93, 95, 97, 100, 102, 103, 105, 107, 108, 110, 112, 111, 113, 114, 116,
			 94, 95, 97, 99, 102, 104, 105, 107, 109, 110, 112, 114, 113, 115, 116, 118,
			 94, 95, 97, 99, 102, 104, 105, 107, 109, 110, 112, 114, 113, 115, 116, 118,
			 94, 95, 97, 99, 102, 104, 105, 107, 109, 110, 112, 114, 113, 115, 116, 118,
			 94, 95, 97, 99, 102, 104, 105, 107, 109, 110, 112, 114, 113, 115, 116, 118,
			 90, 91, 93, 95, 98, 100, 101, 103, 105, 106, 108, 110, 109, 111, 112, 114,
			 90, 91, 93, 95, 98, 100, 101, 103, 105, 106, 108, 110, 109, 111, 112, 114,
			 90, 91, 93, 95, 98, 100, 101, 103, 105, 106, 108, 110, 109, 111, 112, 114,
			 90, 91, 93, 95, 98, 100, 101, 103, 105, 106, 108, 110, 109, 111, 112, 114,
			 88, 89, 91, 93, 96, 98, 99, 101, 103, 104, 106, 108, 107, 109, 110, 112,
			 88, 89, 91, 93, 96, 98, 99, 101, 103, 104, 106, 108, 107, 109, 110, 112,
			 88, 89, 91, 93, 96, 98, 99, 101, 103, 104, 106, 108, 107, 109, 110, 112,
			 88, 89, 91, 93, 96, 98, 99, 101, 103, 104, 106, 108, 107, 109, 110, 112
		};
			 
		ResidualBlock[] chromaAC = new ResidualBlock[] { null, null, null, null };
		CodedChroma chroma = new CodedChroma(null, chromaAC, null, chromaAC,
				null, null);

		MBlockWithResidual other = new MBlockWithResidual(0, chroma, null, luma) {
		};
		MBlockIntraNxN mBlockIntraNxN = new MBlockIntraNxN(other, prediction);

		Plane chromaPlane = new NearbyPixels.Plane(null, null, null, null);
		NearbyPixels near = new NearbyPixels(new NearbyPixels.Plane(mb153,
				mb114, mb113, mb115), chromaPlane, chromaPlane);
		MBlockDecoderI4x4 mBlockDecoder = new MBlockDecoderI4x4(new int[] { 0,
				0 }, 8, 8);
		DecodedMBlock actual = mBlockDecoder.decodeINxN(mBlockIntraNxN, qp,
				near);

		assertArrayEquals(expected, actual.getLuma(), 256);
	}
	
	public void testMB593() throws Exception {
		int[] mb552 = new int[] {
			129, 129, 129, 129, 133, 135, 138, 139, 137, 138, 140, 141, 143, 143, 143, 143,
			129, 129, 129, 129, 133, 135, 138, 139, 137, 138, 140, 141, 143, 143, 143, 143,
			129, 129, 129, 129, 133, 135, 138, 139, 137, 138, 140, 141, 143, 143, 143, 143,
			129, 129, 129, 129, 133, 135, 138, 139, 137, 138, 140, 141, 143, 143, 143, 143,
			125, 125, 125, 125, 129, 131, 134, 135, 137, 138, 140, 141, 143, 143, 143, 143,
			125, 125, 125, 125, 129, 131, 134, 135, 137, 138, 140, 141, 143, 143, 143, 143,
			125, 125, 125, 125, 129, 131, 134, 135, 137, 138, 140, 141, 143, 143, 143, 143,
			125, 125, 125, 125, 129, 131, 134, 135, 137, 138, 140, 141, 143, 143, 143, 143,
			129, 129, 129, 129, 133, 135, 138, 139, 141, 142, 144, 145, 147, 147, 147, 147,
			129, 129, 129, 129, 133, 135, 138, 139, 141, 142, 144, 145, 147, 147, 147, 147,
			129, 129, 129, 129, 133, 135, 138, 139, 141, 142, 144, 145, 147, 147, 147, 147,
			129, 129, 129, 129, 133, 135, 138, 139, 141, 142, 144, 145, 147, 147, 147, 147,
			137, 137, 137, 137, 141, 143, 146, 147, 145, 146, 148, 149, 151, 151, 151, 151,
			137, 137, 137, 137, 141, 143, 146, 147, 145, 146, 148, 149, 151, 151, 151, 151,
			137, 137, 137, 137, 141, 143, 146, 147, 145, 146, 148, 149, 151, 151, 151, 151,
			137, 137, 137, 137, 141, 143, 146, 147, 145, 146, 148, 149, 151, 151, 151, 151
		};

	
		int[] mb553 = new int[] {
			147, 146, 144, 142, 143, 141, 139, 137, 136, 134, 132, 130, 127, 125, 123, 122,
			148, 146, 145, 143, 143, 141, 140, 138, 136, 135, 133, 131, 127, 126, 124, 122,
			149, 147, 145, 143, 144, 142, 140, 139, 137, 135, 133, 132, 128, 126, 125, 123,
			149, 147, 146, 144, 144, 143, 141, 139, 137, 136, 134, 132, 129, 127, 125, 123,
			148, 146, 144, 143, 143, 141, 139, 138, 136, 134, 133, 131, 127, 125, 124, 122,
			148, 147, 145, 143, 143, 142, 140, 138, 137, 135, 133, 131, 128, 126, 124, 123,
			149, 147, 146, 144, 144, 142, 141, 139, 137, 135, 134, 132, 128, 127, 125, 123,
			150, 148, 146, 144, 145, 143, 141, 140, 138, 136, 134, 133, 129, 127, 125, 124,
			148, 146, 145, 143, 143, 142, 140, 138, 136, 135, 133, 131, 128, 126, 124, 122,
			149, 147, 145, 144, 144, 142, 140, 139, 137, 135, 134, 132, 128, 126, 125, 123,
			149, 148, 146, 144, 144, 143, 141, 139, 138, 136, 134, 132, 129, 127, 125, 124,
			150, 148, 146, 145, 145, 143, 142, 140, 138, 136, 135, 133, 129, 128, 126, 124,
			149, 147, 145, 143, 144, 142, 140, 138, 137, 135, 133, 132, 128, 126, 124, 123,
			149, 147, 146, 144, 144, 143, 141, 139, 137, 136, 134, 132, 128, 127, 125, 123,
			150, 148, 146, 145, 145, 143, 141, 140, 138, 136, 135, 133, 129, 127, 126, 124,
			150, 149, 147, 145, 145, 144, 142, 140, 139, 137, 135, 133, 130, 128, 126, 125
		};
	

		int[] mb554 = new int[] {
			116, 116, 116, 116, 110, 110, 110, 110, 103, 103, 103, 103, 99, 99, 99, 99,
			116, 116, 116, 116, 110, 110, 110, 110, 103, 103, 103, 103, 99, 99, 99, 99,
			116, 116, 116, 116, 110, 110, 110, 110, 103, 103, 103, 103, 99, 99, 99, 99,
			116, 116, 116, 116, 110, 110, 110, 110, 103, 103, 103, 103, 99, 99, 99, 99,
			120, 116, 116, 116, 109, 109, 109, 109, 103, 103, 103, 103, 99, 99, 99, 99,
			121, 118, 116, 116, 109, 109, 109, 109, 103, 103, 103, 103, 99, 99, 99, 99,
			123, 120, 116, 116, 109, 109, 109, 109, 103, 103, 103, 103, 99, 99, 99, 99,
			123, 121, 118, 116, 109, 109, 109, 109, 103, 103, 103, 103, 99, 99, 99, 99,
			121, 121, 121, 121, 111, 111, 111, 111, 108, 105, 103, 103, 101, 99, 99, 99,
			121, 121, 121, 121, 111, 111, 111, 111, 111, 108, 105, 103, 102, 100, 99, 99,
			121, 121, 121, 121, 111, 111, 111, 111, 111, 111, 108, 105, 103, 101, 99, 99,
			121, 121, 121, 121, 111, 111, 111, 111, 111, 111, 111, 108, 104, 102, 100, 99,
			122, 122, 122, 122, 117, 117, 117, 117, 114, 113, 111, 111, 110, 107, 105, 104,
			122, 122, 122, 122, 117, 117, 117, 117, 117, 116, 114, 113, 112, 109, 106, 104,
			122, 122, 122, 122, 117, 117, 117, 117, 117, 117, 117, 116, 115, 110, 107, 105,
			122, 122, 122, 122, 117, 117, 117, 117, 117, 117, 117, 117, 117, 112, 109, 106
		};
	
		int[] mb592 = new int[] {
			137, 137, 137, 139, 145, 147, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151,
			137, 137, 138, 141, 145, 147, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151,
			137, 137, 139, 142, 145, 147, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151,
			137, 138, 141, 143, 145, 147, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151,
			135, 138, 140, 142, 144, 146, 149, 151, 151, 151, 151, 151, 151, 151, 151, 151,
			133, 136, 139, 141, 143, 145, 147, 150, 150, 150, 150, 150, 150, 150, 150, 150,
			129, 135, 138, 140, 142, 144, 146, 149, 149, 149, 149, 149, 149, 149, 149, 149,
			126, 133, 136, 139, 141, 143, 145, 147, 147, 147, 147, 147, 147, 147, 147, 147,
			125, 130, 135, 138, 138, 138, 138, 138, 145, 147, 147, 147, 147, 147, 147, 147,
			122, 127, 132, 136, 136, 136, 136, 136, 140, 145, 147, 147, 147, 147, 147, 147,
			118, 125, 130, 135, 135, 135, 135, 135, 136, 140, 145, 147, 147, 147, 147, 147,
			116, 122, 127, 132, 132, 132, 132, 132, 135, 136, 140, 145, 145, 145, 145, 145,
			126, 126, 126, 126, 131, 131, 131, 131, 131, 131, 131, 131, 135, 135, 135, 135,
			126, 126, 126, 126, 129, 129, 129, 129, 129, 129, 129, 129, 133, 133, 133, 133,
			126, 126, 126, 126, 124, 124, 124, 124, 124, 124, 124, 124, 128, 128, 128, 128,
			126, 126, 126, 126, 121, 121, 121, 121, 121, 121, 121, 121, 125, 125, 125, 125
		};
		
		 int[] expected = new int[] {
			151, 150, 148, 146, 145, 143, 141, 140, 138, 136, 134, 132, 130, 128, 126, 125,
			151, 150, 149, 147, 144, 142, 140, 139, 137, 135, 133, 130, 130, 128, 126, 125,
			151, 151, 150, 148, 143, 141, 140, 138, 136, 134, 132, 129, 130, 128, 126, 125,
			151, 151, 150, 149, 142, 140, 139, 137, 135, 133, 130, 128, 130, 128, 126, 125,
			
			151, 151, 151, 151, 142, 140, 139, 137, 139, 137, 134, 132, 130, 128, 126, 125,
			150, 150, 150, 150, 142, 140, 139, 137, 139, 137, 134, 132, 130, 128, 126, 125,
			149, 149, 149, 149, 142, 140, 139, 137, 139, 137, 134, 132, 130, 128, 126, 125,
			147, 147, 147, 147, 142, 140, 139, 137, 139, 137, 134, 132, 130, 128, 126, 125,
			
			143, 143, 143, 143, 140, 139, 138, 138, 138, 137, 136, 135, 130, 128, 126, 125,
			143, 143, 143, 143, 139, 138, 138, 137, 136, 135, 134, 133, 130, 128, 126, 125,
			143, 143, 143, 143, 138, 138, 137, 134, 134, 133, 133, 133, 130, 128, 126, 125,
			141, 141, 141, 141, 138, 137, 134, 133, 133, 133, 133, 133, 130, 128, 126, 125,
			
			134, 132, 131, 129, 133, 132, 131, 130, 129, 127, 126, 124, 124, 124, 124, 124,
			131, 129, 127, 126, 129, 128, 128, 128, 126, 124, 122, 121, 121, 121, 121, 121,
			127, 126, 125, 125, 123, 123, 123, 123, 122, 121, 120, 120, 120, 120, 120, 120,
			125, 125, 125, 125, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120
		 };

	
		IntraNxNPrediction prediction = new IntraNxNPrediction(new int[] { 5,
				7, 1, 0, 7, 0, 0, 0, 1, 3, 8, 8, 8, 0, 8, 1 }, 0);

		int qp = 28;

		ResidualBlock[] luma = new ResidualBlock[] {
				null,
				null,
				null,
				null,
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }), null, null, null, null };

		ResidualBlock cbDC = new ResidualBlock(new int[] { 0, 0, 0, 0 });
		ResidualBlock crDC = new ResidualBlock(new int[] { 1, 0, 0, 0 });
		ResidualBlock[] chromaAC = new ResidualBlock[] { null, null, null, null };

		CodedChroma chroma = new CodedChroma(cbDC, chromaAC, crDC, chromaAC,
				null, null);

		MBlockWithResidual other = new MBlockWithResidual(0, chroma, null, luma) {
		};
		MBlockIntraNxN mBlockIntraNxN = new MBlockIntraNxN(other, prediction);

		Plane chromaPlane = new NearbyPixels.Plane(null, null, null, null);
		NearbyPixels near = new NearbyPixels(new NearbyPixels.Plane(mb592,
				mb553, mb552, mb554), chromaPlane, chromaPlane);
		MBlockDecoderI4x4 mBlockDecoder = new MBlockDecoderI4x4(new int[] { 0,
				0 }, 8, 8);
		DecodedMBlock actual = mBlockDecoder.decodeINxN(mBlockIntraNxN, qp,
				near);

		assertArrayEquals(expected, actual.getLuma(), 256);
	}
	
	public void testMBlock18() throws Exception {
		int[] expected = new int[] {
			132, 135, 140, 142, 153, 156, 161, 163, 170, 173, 178, 180, 178, 181, 186, 188,
			128, 130, 135, 138, 149, 152, 157, 159, 168, 170, 175, 178, 178, 181, 186, 188,
			118, 120, 125, 128, 139, 142, 147, 149, 163, 165, 170, 173, 178, 181, 186, 188, 
			112, 115, 120, 122, 133, 136, 141, 143, 160, 163, 168, 170, 178, 181, 186, 188, 
			109, 114, 118, 121, 128, 134, 144, 148, 159, 165, 175, 179, 182, 185, 190, 192, 
			106, 111, 116, 119, 128, 134, 144, 148, 159, 165, 175, 179, 182, 185, 190, 192, 
			102, 109, 114, 118, 128, 134, 144, 148, 159, 165, 175, 179, 182, 185, 190, 192, 
			100, 106, 111, 116, 128, 134, 144, 148, 159, 165, 175, 179, 182, 185, 190, 192, 
			100, 106, 111, 116, 128, 134, 144, 148, 163, 169, 179, 183, 182, 185, 190, 192, 
			100, 106, 111, 116, 128, 134, 144, 148, 163, 169, 179, 183, 182, 185, 190, 192, 
			100, 106, 111, 116, 128, 134, 144, 148, 163, 169, 179, 183, 182, 185, 190, 192, 
			100, 106, 111, 116, 128, 134, 144, 148, 163, 169, 179, 183, 182, 185, 190, 192, 
			100, 106, 111, 116, 128, 134, 144, 148, 163, 169, 179, 183, 184, 188, 191, 192, 
			100, 106, 111, 116, 128, 134, 144, 148, 163, 169, 179, 183, 186, 189, 192, 192, 
			100, 106, 111, 116, 128, 134, 144, 148, 163, 169, 179, 183, 188, 191, 192, 192, 
			100, 106, 111, 116, 128, 134, 144, 148, 163, 169, 179, 183, 189, 192, 192, 192
		};
		
		int[] mb17 = new int[] {
			119, 119, 119, 119, 115, 115, 115, 115, 111, 111, 111, 111, 116, 116, 116, 116,
			119, 119, 119, 119, 115, 115, 115, 115, 111, 111, 111, 111, 114, 114, 114, 114,
			119, 119, 119, 119, 115, 115, 115, 115, 111, 111, 111, 111, 109, 109, 109, 109,
			119, 119, 119, 119, 115, 115, 115, 115, 111, 111, 111, 111, 106, 106, 106, 106,
			119, 119, 118, 116, 111, 111, 111, 111, 107, 107, 106, 103, 100, 100, 100, 100,
			119, 118, 116, 115, 111, 111, 111, 111, 107, 106, 103, 102, 100, 100, 100, 100,
			118, 116, 115, 115, 111, 111, 111, 111, 106, 103, 102, 102, 100, 100, 100, 100,
			116, 115, 115, 115, 111, 111, 111, 111, 103, 102, 102, 102, 100, 100, 100, 100,
			115, 115, 114, 112, 107, 107, 105, 101, 96, 95, 94, 94, 93, 93, 93, 93,
			115, 114, 112, 111, 107, 105, 101, 98, 94, 94, 94, 94, 93, 93, 93, 93,
			114, 112, 111, 111, 105, 101, 98, 98, 94, 94, 94, 94, 93, 93, 93, 93,
			112, 111, 111, 111, 101, 98, 98, 98, 94, 94, 94, 94, 93, 93, 93, 93,
			111, 111, 109, 103, 99, 98, 98, 98, 90, 90, 90, 89, 91, 91, 91, 91,
			111, 109, 103, 99, 98, 98, 98, 98, 90, 90, 89, 89, 91, 91, 91, 91,
			109, 103, 99, 98, 98, 98, 98, 98, 90, 89, 89, 89, 91, 91, 91, 91,
			103, 99, 98, 98, 98, 98, 98, 98, 89, 89, 89, 89, 91, 91, 91, 91
		};
		
		IntraNxNPrediction prediction = new IntraNxNPrediction(new int[] { 1,
				1, 5, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7 }, 0);

		int qp = 28;
		
		ResidualBlock[] luma = new ResidualBlock[] {
				new ResidualBlock(new int[] { 4, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 4, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				null,
				null,
				null,
				null,
				new ResidualBlock(new int[] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }) };

		ResidualBlock cbDC = new ResidualBlock(new int[] { -7, 3, 1, 0 });
		ResidualBlock crDC = new ResidualBlock(new int[] { 3, -1, 0, 0 });

		ResidualBlock[] cbAC = new ResidualBlock[] {
				new ResidualBlock(new int[] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }) };
		ResidualBlock[] crAC = new ResidualBlock[] {
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0 }) };
		
		CodedChroma chroma = new CodedChroma(cbDC, cbAC, crDC, crAC, null, null);

		MBlockWithResidual other = new MBlockWithResidual(0, chroma, null, luma) {
		};
		MBlockIntraNxN mBlockIntraNxN = new MBlockIntraNxN(other, prediction);

		MBlockDecoderI4x4 mBlockDecoder = new MBlockDecoderI4x4(new int[] { 0,
				0 }, 8, 8);

		Plane chromaPlane = new NearbyPixels.Plane(null, null, null, null);
		NearbyPixels near = new NearbyPixels(new NearbyPixels.Plane(mb17, null,
				null, null), chromaPlane, chromaPlane);

		DecodedMBlock actual = mBlockDecoder.decodeINxN(mBlockIntraNxN, qp,
				near);

		assertArrayEquals(expected, actual.getLuma(), 256);
	}
	
	public void testMB719() throws Exception {
		int[] expected = new int[] {
			68, 68, 67, 65, 64, 64, 64, 64, 65, 65, 65, 65, 74, 79, 84, 87,
			68, 67, 65, 64, 64, 64, 64, 64, 65, 65, 65, 65, 76, 81, 86, 87,
			67, 65, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 79, 84, 87, 87,
			65, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 81, 86, 87, 87,
			62, 62, 62, 62, 63, 63, 63, 63, 64, 64, 64, 64, 74, 77, 82, 84,
			62, 62, 62, 62, 63, 63, 63, 63, 64, 64, 64, 64, 74, 77, 82, 84,
			62, 62, 62, 62, 63, 63, 63, 63, 64, 64, 64, 64, 74, 77, 82, 84,
			62, 62, 62, 62, 63, 63, 63, 63, 64, 64, 64, 64, 74, 77, 82, 84,
			64, 64, 64, 64, 60, 60, 60, 60, 62, 62, 62, 62, 71, 71, 71, 71,
			64, 64, 64, 64, 60, 60, 60, 60, 62, 62, 62, 62, 71, 71, 71, 71,
			64, 64, 64, 64, 60, 60, 60, 60, 62, 62, 62, 62, 71, 71, 71, 71,
			64, 64, 64, 64, 60, 60, 60, 60, 62, 62, 62, 62, 71, 71, 71, 71,
			59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61, 66, 66, 66, 66,
			59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61, 66, 66, 66, 66,
			59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61, 66, 66, 66, 66,
			59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61, 66, 66, 66, 66
		};
		
		int[] mb718 = new int[] {
			72, 72, 72, 72, 70, 70, 70, 70, 70, 70, 70, 70, 68, 68, 68, 68,
			72, 72, 72, 72, 70, 70, 70, 70, 70, 70, 70, 70, 68, 68, 68, 68,
			72, 72, 72, 72, 70, 70, 70, 70, 70, 70, 70, 70, 68, 68, 68, 68,
			72, 72, 72, 72, 70, 70, 70, 70, 70, 70, 70, 70, 68, 68, 68, 68,
			76, 76, 76, 76, 74, 74, 74, 74, 70, 70, 70, 70, 68, 68, 68, 68,
			76, 76, 76, 76, 74, 74, 74, 74, 70, 70, 70, 70, 68, 68, 68, 68,
			76, 76, 76, 76, 74, 74, 74, 74, 70, 70, 70, 70, 68, 68, 68, 68,
			76, 76, 76, 76, 74, 74, 74, 74, 70, 70, 70, 70, 68, 68, 68, 68,
			74, 74, 74, 74, 72, 72, 72, 72, 68, 68, 68, 68, 66, 66, 66, 66,
			74, 74, 74, 74, 72, 72, 72, 72, 68, 68, 68, 68, 66, 66, 66, 66,
			74, 74, 74, 74, 72, 72, 72, 72, 68, 68, 68, 68, 66, 66, 66, 66,
			74, 74, 74, 74, 72, 72, 72, 72, 68, 68, 68, 68, 66, 66, 66, 66,
			74, 74, 74, 74, 72, 72, 72, 72, 64, 64, 64, 64, 62, 62, 62, 62,
			74, 74, 74, 74, 72, 72, 72, 72, 64, 64, 64, 64, 62, 62, 62, 62,
			74, 74, 74, 74, 72, 72, 72, 72, 64, 64, 64, 64, 62, 62, 62, 62,
			74, 74, 74, 74, 72, 72, 72, 72, 64, 64, 64, 64, 62, 62, 62, 62
		};
		
		int[] mb678 = new int[] {
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
			69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
		};
		
		int[] mb679 = new int[] {
			70, 70, 70, 70, 72, 72, 72, 72, 74, 74, 76, 80, 84, 91, 100, 100,
			70, 70, 70, 70, 72, 72, 72, 72, 73, 74, 74, 76, 83, 87, 95, 100,
			70, 70, 70, 70, 72, 72, 72, 72, 72, 73, 74, 74, 80, 84, 91, 100,
			70, 70, 70, 70, 72, 72, 72, 72, 72, 72, 73, 74, 77, 83, 87, 95,
			70, 70, 70, 70, 67, 67, 67, 67, 72, 72, 73, 74, 81, 87, 91, 99,
			70, 70, 70, 70, 67, 67, 67, 67, 72, 72, 73, 74, 81, 87, 91, 99,
			70, 70, 70, 70, 67, 67, 67, 67, 72, 72, 73, 74, 81, 87, 91, 99,
			70, 70, 70, 70, 67, 67, 67, 67, 72, 72, 73, 74, 81, 87, 91, 99,
			70, 70, 69, 68, 67, 67, 67, 67, 68, 71, 72, 73, 78, 84, 89, 95,
			70, 69, 68, 67, 67, 67, 67, 67, 67, 68, 71, 72, 76, 81, 87, 92,
			69, 68, 67, 67, 67, 67, 67, 67, 67, 67, 68, 71, 73, 78, 84, 89,
			68, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 72, 76, 81, 87,
			68, 68, 68, 68, 64, 64, 64, 64, 66, 66, 66, 66, 72, 76, 81, 87, 
			68, 68, 68, 68, 64, 64, 64, 64, 66, 66, 66, 66, 72, 76, 81, 87,
			68, 68, 68, 68, 64, 64, 64, 64, 66, 66, 66, 66, 72, 76, 81, 87,
			68, 68, 68, 68, 64, 64, 64, 64, 66, 66, 66, 66, 72, 76, 81, 87
		};
		
		IntraNxNPrediction prediction = new IntraNxNPrediction(new int[] { 3,
				2, 2, 2, 2, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 }, 1);

		ResidualBlock[] luma = new ResidualBlock[] {
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }),
				new ResidualBlock(new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0 }), null, null, null, null };

		int qp = 28;

		ResidualBlock[] chromaAC = new ResidualBlock[] { null, null, null, null };
		CodedChroma chroma = new CodedChroma(null, chromaAC, null, chromaAC,
				null, null);

		MBlockWithResidual other = new MBlockWithResidual(0, chroma, null, luma) {
		};
		MBlockIntraNxN mBlockIntraNxN = new MBlockIntraNxN(other, prediction);

		MBlockDecoderI4x4 mBlockDecoder = new MBlockDecoderI4x4(new int[] { 0,
				0 }, 8, 8);

		int[] chromaPels = new int[64];
		Plane chromaPlane = new NearbyPixels.Plane(chromaPels, chromaPels,
				chromaPels, chromaPels);
		NearbyPixels near = new NearbyPixels(new NearbyPixels.Plane(mb718,
				mb679, mb678, null), chromaPlane, chromaPlane);
		DecodedMBlock actual = mBlockDecoder.decodeINxN(mBlockIntraNxN, qp,
				near);

		assertArrayEquals(expected, actual.getLuma(), 256);
	}
}